#!/usr/bin/env node
const { exec } = require('child_process');
const chalk    = require('chalk');
const Spinner  = require('cli-spinner').Spinner;
const client   = require('../lib/client.js');
const spin     = new Spinner();
const log      = console.log;
var program    = require('commander');
var wfs       = [];
var members   = [];
var wf        = { states: [] };

program
    .usage('[options] <id>')
    .description('Update and/or display story details')
    .option('-I, --idonly', 'Print only ID of story results', '')
    .option('-s, --state [id|name]', 'Update workflow state of story', '')
    .option('-e, --estimate [number]', 'Update estimate of story', '')
    .option('-o, --owners [id|name]', 'Update owners of story, comma-separated', '')
    .option('-c, --comment [text]', 'Add comment to story', '')
    .option('-O, --open', 'Open story in browser')
    .parse(process.argv);
spin.setSpinnerString(27);

const main = async () => {
    if (!program.idonly)
        spin.start();
    try {
        [ wfs, members ] = await Promise.all([
            client.listWorkflows(),
            client.listMembers(),
        ]);
        wf = wfs[0];    // TODO: this is always getting the default workflow
    } catch (e) {
        log('Error fetching workflows');
    }
    let update = {};
    if (program.state) {
        const stateMatch = new RegExp(program.state, 'i');
        const newState = wf.states.filter(s => {
            return !!`${s.id} ${s.name}`.match(stateMatch);
        })[0];
        update.workflow_state_id = (newState || {}).id;
    }
    if (program.estimate) {
        update.estimate = parseInt(program.estimate, 10);
    }
    if (program.owners) {
        const ownerMatch = new RegExp(program.owners.split(',').join('|'), 'i');
        update.owner_ids = members.filter(m => {
            return !!`${m.id} ${m.profile.name} ${m.profile.mention_name}`
                .match(ownerMatch);
        }).map(m => m.id);
    }
    const hasUpdate = Object.keys(update).length > 0;
    program.args.map(async (id) => {
        let story;
        try {
            if (program.comment) {
                await client.createStoryComment(id, program.comment);
            }
        } catch (e) {
            log('Error creating comment', id);
        }
        try {
            story = await client.getStory(id);
        } catch (e) {
            log('Error fetching story', id);
        }
        try {
            if (hasUpdate) {
                let changed = await client.updateStory(id, update);
                story = Object.assign({}, story, changed);
            }
        } catch (e) {
            log('Error updating story', id);
        }
        if (story) {
            story.state = wf.states
                .filter(s => s.id === story.workflow_state_id)[0];
            story.owners = members.filter(m => {
                return story.owner_ids.indexOf(m.id) > -1;
            });
        }
        if (!program.idonly)
            spin.stop(true);
        if (story) {
            printStory(story);
            if (program.open)
                exec('open ' + storyURL(story));
        }
    });
    if (!program.idonly)
        spin.stop(true);
    return;
};

const storyURL = (story) => {
    return `https://app.clubhouse.io/story/${story.id}`;
};

const printStory = (story) => {
    if (program.idonly) {
        return log(story.id);
    }
    const labels = story.labels.map(l => {
        return chalk.bold(`#${l.id}`) + ` ${l.name}`;
    });
    const owners = story.owners.map(o => {
        return `${o.profile.name} (` + chalk.bold(`${o.profile.mention_name}` + ')');
    });

    log(chalk.blue.bold(`#${story.id}`) + chalk.blue(` ${story.name}`));
    log(chalk.bold('Desc:') + `    ${formatLong(story.description || '_')}`);
    log(chalk.bold('Owners:') + `  ${owners.join(', ') || '_'}`);
    log(chalk.bold('Type:') + `    ${story.story_type}/${story.estimate || '_'}`);
    log(chalk.bold('Label:') + `   ${labels.join(', ') || '_'}`);
    log(chalk.bold('Project:') + chalk.bold(` #${story.project_id}`));
    log(chalk.bold('State:') + chalk.bold(`   #${story.workflow_state_id} `) + story.state.name);
    log(chalk.bold('URL:') + `     ${storyURL(story)}`);
    if (story.archived) {
        log(chalk.bold('Archived: ') + chalk.bold(story.archived));
    }
    if (story.completed) {
        log(chalk.bold('Completed: ') + chalk.bold(story.completed_at));
    }
    story.comments.map(c => {
        log(chalk.bold('Comment:') + ` ${formatLong(c.text)}`);
        log(chalk.bold('  at:') + ` ${c.updated_at}`);
        return c;
    });
    story.files.map(c => {
        log(chalk.bold('File:') + `    ${c.url}?token=${client.requestFactory.token}`);
        log(chalk.bold('  name:') + `  ${c.name}`);
        return c;
    });
    log();
    return story;
};

const formatLong = (str) => {
    return str.split('\n')
        .join('\n         ');
};

main();
