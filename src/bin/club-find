#!/usr/bin/env node
const Spinner   = require('cli-spinner').Spinner;
const configure = require('../lib/configure.js');
const storyLib  = require('../lib/stories.js');
const spin      = new Spinner('Finding... %s ');
const log       = console.log;
var program     = require('commander');

program
    .description('Search through clubouse stories')
    .option('-a, --archived', 'Include archived Stories')
    .option('-I, --idonly', 'Print only ID of story results', '')
    .option('-l, --label [id|name]', 'Stories with label id/name, by regex', '')
    .option('-o, --owner [name]', 'Stories with owner, by regex', '')
    .option('-p, --project [id]', 'Stories in project', '')
    .option('-s, --state [id|name]', 'Stories in workflow state id/name, by regex', '')
    .option('-S, --save [name]', 'Save search configuration as workspace')
    .option('-t, --text [name]', 'Stories with text in name, by regex', '')
    .option('-y, --type [name]', 'Stories of type, by regex', '')
    .parse(process.argv);
spin.setSpinnerString(27);

const main = async () => {
    if (!program.idonly)
        spin.start();
    let stories = [];
    try {
        stories = await storyLib.listStories(program);
    } catch (e) {
        log('Error fetching stories:', e);
    }
    if (!program.idonly)
        spin.stop(true);
    stories.map(storyLib.printStory(program));
    if (program.save) {
        const name = program.save === true ? 'default' : program.save;
        const success = configure.saveWorkspace(name, {
            archived:   program.archived || undefined,
            label:      program.label    || undefined,
            owner:      program.owner    || undefined,
            project:    program.project  || undefined,
            state:      program.state    || undefined,
            text:       program.text     || undefined,
            type:       program.type     || undefined,
        });
        if (success) {
            log('Saved query as %s workspace', name);
        }
    }
    return;
};

main();
