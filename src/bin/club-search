#!/usr/bin/env node
const client  = require('../lib/client.js');
const chalk   = require('chalk');
const Spinner = require('cli-spinner').Spinner;
const spin    = new Spinner();
const log     = console.log;
var program   = require('commander');
var wfs       = [];
var projects  = [];
var members   = [];
var wf        = { states: [] };

program
    .description('Search through clubouse stories')
    .option('-a, --archived', 'Include archived Stories')
    .option('-I, --idonly', 'Print only ID of story results', '')
    .option('-l, --label [id|name]', 'Stories with label id/name, by regex', '')
    .option('-o, --owner [name]', 'Stories with owner, by regex', '')
    .option('-p, --project [id]', 'Stories in project', '.')
    .option('-s, --state [id|name]', 'Stories in workflow state id/name, by regex', '')
    .option('-t, --text [name]', 'Stories with text in name, by regex', '')
    .option('-y, --type [name]', 'Stories of type, by regex', '')
    .parse(process.argv);
spin.setSpinnerString(27);

const main = async () => {
    if (!program.idonly)
        spin.start();
    try {
        [ wfs, members, projects ] = await Promise.all([
            client.listWorkflows(),
            client.listMembers(),
            client.listProjects()
        ]);
        wf = wfs[0];    // TODO: this is always getting the default workflow
    } catch (e) {
        log('Error fetching workflows');
    }
    const filteredProjects = projects
        .filter(p => {
            return !!(p.id + '').match(program.project);
        });
    var stories = await Promise.all(filteredProjects.map(fetchStories));
    if (!program.idonly)
        spin.stop(true);
    stories.map(printStories(filteredProjects));
    return;
};

const fetchStories = async (project) => {
    return client.listStories(project.id);
};

const printStories = (projects) => { return (stories, index) => {
    const project = projects[index];
    const filtered = stories.map(story => {
        story.state = wf.states
            .filter(s => s.id === story.workflow_state_id)[0];
        return story;
    }).map(story => {
        story.owners = members.filter(m => {
            return story.owner_ids.indexOf(m.id) > -1;
        });
        return story;
    }).filter(s => {
        if (!(s.labels
            .map(l => `${l.id},${l.name}`).join(',') + '')
            .match(new RegExp(program.label, 'i'))) {
            return false;
        }
        if (!(s.workflow_state_id + ' ' + s.state.name)
            .match(new RegExp(program.state, 'i'))) {
            return false;
        }
        if (program.owner) {
            const ownerMatch = new RegExp(program.owner, 'i');
            return s.owners.filter(o => {
                return !!`${o.profile.name} ${o.profile.mention_name}`
                    .match(ownerMatch);
            }).length > 0;
        }
        if (!s.name.match(new RegExp(program.text, 'i'))) {
            return false;
        }
        if (!s.story_type.match(new RegExp(program.type, 'i'))) {
            return false;
        }
        if (!program.archived && s.archived) {
            return false;
        }
        return true;
    });
    if (!filtered.length) {
        return filtered;
    }
    return filtered.map(printStory(project));
};};

const printStory = (project) => { return (story) => {
    if (program.idonly) {
        return log(story.id);
    }
    const labels = story.labels.map(l => {
        return chalk.bold(`#${l.id}`) + ` ${l.name}`;
    });
    const owners = story.owners.map(o => {
        return `${o.profile.name} (` + chalk.bold(`${o.profile.mention_name}` + ')');
    });
    log(chalk.blue.bold(`#${story.id}`) + chalk.blue(` ${story.name}`));
    log(`  Type:    ${story.story_type}/${story.estimate || '_'}`);
    log(`  Label:   ${labels.join(', ')}`);
    log('  Project: ' + chalk.bold(`#${project.id}`) + ` ${project.name}`);
    log('  Owners:  ' + `${owners.join(', ') || '_'}`);
    log('  State:   ' + chalk.bold(`#${story.workflow_state_id} `) + story.state.name);
    log(`  URL:     https://app.clubhouse.io/story/${story.id}`);
    if (story.archived) {
        log('  archived: ' + chalk.bold(story.archived));
    }
    log();
    return story;
};};

main();
