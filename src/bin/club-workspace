#!/usr/bin/env node
const configure    = require('../lib/configure.js');
const storyLib     = require('../lib/stories.js');
const config       = configure.loadConfig();
const log          = console.log;
var program        = require('commander');

program
    .description('List stories matching saved workspace query')
    .option('-l, --list', 'List saved workspaces')
    .option('-n, --name [name]', 'Load named workspace', '')
    .option('-u, --unset [name]', 'Force unset saved workspace')
    .parse(process.argv);

const main = async () => {
    if (!config || !config.token) {
        log('Not installed yet.');
        log('Please run: club install');
    } else if (!config.workspaces) {
        log('No workspace saved.');
        log('Please run:');
        log('  club find [options] --save');
        log('to create your first one.');
    } else if (program.list) {
        log('Workspaces:');
        Object.keys(config.workspaces)
            .map(w => {
                log(' ', w + ':', toArgs(config.workspaces[w]));
            });
    } else if (program.unset) {
        const success = configure.removeWorkspace(program.unset);
        if (success) {
            log('Successfully removed %s workspace', program.unset);
        }
    } else {
        const name = program.name || program.args[0] || 'default';
        const workspace = config.workspaces[name];
        if (!workspace) {
            log('No workspace saved with name', name);
            log('Please run:');
            log('  club find [options] --save', name);
            log('to create it.');
        } else {
            log('Loading workspace %s:', name, toArgs(workspace));
            log();
            let stories = [];
            try {
                stories = await storyLib.listStories(workspace);
            } catch (e) {
                log('Error fetching stories:', e);
            }
            stories.map(storyLib.printStory(program));
        }
    }
};
main();

function toArgs(obj) {
    return Object.keys(obj)
        .map(k => {
            return `--${k} '${obj[k]}'`;
        }).join(' ');
}
